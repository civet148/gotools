// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc_proxy.proto

package rpcproxypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestNull struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestNull) Reset()         { *m = RequestNull{} }
func (m *RequestNull) String() string { return proto.CompactTextString(m) }
func (*RequestNull) ProtoMessage()    {}
func (*RequestNull) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5debaf4ddc93b62, []int{0}
}
func (m *RequestNull) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestNull.Unmarshal(m, b)
}
func (m *RequestNull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestNull.Marshal(b, m, deterministic)
}
func (m *RequestNull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestNull.Merge(m, src)
}
func (m *RequestNull) XXX_Size() int {
	return xxx_messageInfo_RequestNull.Size(m)
}
func (m *RequestNull) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestNull.DiscardUnknown(m)
}

var xxx_messageInfo_RequestNull proto.InternalMessageInfo

type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5debaf4ddc93b62, []int{1}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestNull)(nil), "rpcproxypb.RequestNull")
	proto.RegisterType((*Pong)(nil), "rpcproxypb.Pong")
}

func init() { proto.RegisterFile("rpc_proxy.proto", fileDescriptor_b5debaf4ddc93b62) }

var fileDescriptor_b5debaf4ddc93b62 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2a, 0x48, 0x8e,
	0x2f, 0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x2a, 0x48,
	0x06, 0xf3, 0x0b, 0x92, 0x94, 0x78, 0xb9, 0xb8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xfc,
	0x4a, 0x73, 0x72, 0x94, 0x14, 0xb8, 0x58, 0x02, 0xf2, 0xf3, 0xd2, 0x85, 0x24, 0xb8, 0xd8, 0x73,
	0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x23,
	0x37, 0x2e, 0xfe, 0xa0, 0x82, 0xe4, 0x00, 0x90, 0xf6, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54,
	0x21, 0x63, 0x2e, 0x96, 0x80, 0xcc, 0xbc, 0x74, 0x21, 0x71, 0x3d, 0x84, 0xc1, 0x7a, 0x48, 0xa6,
	0x4a, 0x09, 0x20, 0x4b, 0x80, 0xcc, 0x57, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xc5, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x09, 0xb9, 0x96, 0x52, 0x9e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcProxyServiceClient is the client API for RpcProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcProxyServiceClient interface {
	//测试接口
	Ping(ctx context.Context, in *RequestNull, opts ...grpc.CallOption) (*Pong, error)
}

type rpcProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcProxyServiceClient(cc *grpc.ClientConn) RpcProxyServiceClient {
	return &rpcProxyServiceClient{cc}
}

func (c *rpcProxyServiceClient) Ping(ctx context.Context, in *RequestNull, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/rpcproxypb.RpcProxyService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcProxyServiceServer is the server API for RpcProxyService service.
type RpcProxyServiceServer interface {
	//测试接口
	Ping(context.Context, *RequestNull) (*Pong, error)
}

// UnimplementedRpcProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRpcProxyServiceServer struct {
}

func (*UnimplementedRpcProxyServiceServer) Ping(ctx context.Context, req *RequestNull) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterRpcProxyServiceServer(s *grpc.Server, srv RpcProxyServiceServer) {
	s.RegisterService(&_RpcProxyService_serviceDesc, srv)
}

func _RpcProxyService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcProxyServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproxypb.RpcProxyService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcProxyServiceServer).Ping(ctx, req.(*RequestNull))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcproxypb.RpcProxyService",
	HandlerType: (*RpcProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RpcProxyService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_proxy.proto",
}
